#!/usr/bin/env node

// Config port

const port = normalizePort(process.env.PORT || '3000');

// Module dependencies.

global.build = require('../resources/build');
global.tools = require('../resources/tools');

global.app = require('../app').set('port', port);
const debug = require('debug')('chat:server');
const http = require('http').createServer(app); // serve http
const io = require('socket.io')(http); // serve socket
const socketRun = require('../socket')(io);

global.$$ = require('../conf-build');

// Listen on provided port, on all network interfaces.

http.listen(port, '0.0.0.0', ()=>{
  console.log('Server run in: http://localhost:'+port)
});
http.on('error', onError);
http.on('listening', onListening);

// Normalize a port into a number, string, or false.

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

// Event listener for HTTP server "error" event.

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event.

function onListening() {
  var addr = http.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
